#####################
#                   #
#      SENSORS      #
#                   #
#####################

####################
#__System Sensors__#

- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /
    - type: processor_use
    - type: memory_use_percent

- platform: uptime
  name: Uptime
  unit_of_measurement: days
#  unit_of_measurement: hours

# CPU temperature
- platform: command_line
  name: CPU Temperature
  command: 'cat /sys/class/thermal/thermal_zone3/temp'
  unit_of_measurement: 'Â°C'
  value_template: '{{ (value | multiply(0.001)) | round(1) }}'

- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /home
    - type: memory_use_percent
    - type: processor_use

# - platform: command_line
#   name: SSL cert expiry
#   unit_of_measurement: days
#   scan_interval: 86400
#   command: "ssl-cert-check -b -c /etc/letsencrypt/live/hassbian-three.duckdns.org/cert.pem | awk '{ print $NF }'"

###################
#__Power Sensors__#

- platform: template
  sensors:
    sensor_espresso:
      value_template: '{{ states.switch.espresso_machine.attributes.current_power_w | round(0) }}'
      unit_of_measurement: 'W'

- platform: template
  sensors:
    sensor_desktop:
      value_template: '{{ states.switch.desktop.attributes["today_energy_kwh"] }}'
      unit_of_measurement: 'W'

###################
#__Plant_Sensors__#

# - platform: miflora
#   mac: !secret mi_plant_sensor_1
#   name: plant sensor 1
#   monitored_conditions:
#     - temperature
#     - moisture
#     - light
#     - conductivity
#     - battery
#
# - platform: miflora
#   mac: !secret mi_plant_sensor_2
#   name: plant sensor 2
#   monitored_conditions:
#     - temperature
#     - moisture
#     - light
#     - conductivity
#     - battery
#
# - platform: miflora
#   mac: !secret mi_plant_sensor_3
#   name: plant sensor 3
#   monitored_conditions:
#     - temperature
#     - moisture
#     - light
#     - conductivity
#     - battery
#
# - platform: miflora
#   mac: !secret mi_plant_sensor_4
#   name: plant sensor 4
#   monitored_conditions:
#     - temperature
#     - moisture
#     - light
#     - conductivity
#     - battery

#####################
#__Battery_Sensors__#

- platform: template
  sensors:
    x_door_1_bat: # This arrived with 63%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Conservatory Door Battery
      value_template: >
        {% if is_state('binary_sensor.door_window_sensor_158d000234dc7b', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.door_window_sensor_158d000234dc7b.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xd1 = states.binary_sensor.door_window_sensor_158d000234dc7b.attributes.battery_level|default(0)|int %}
        {% set battery_round_xd1 = (battery_level_xd1 / 10) |int * 10 %}
        {% if battery_round_xd1 >= 100 or is_state('binary_sensor.door_window_sensor_158d000234dc7b', 'unknown') %}
          mdi:battery
        {% elif battery_round_xd1 > 0 %}
          mdi:battery-{{ battery_round_xd1 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_door_2_bat: # This arrived with 63%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Shed Door Battery
      value_template: >
        {% if is_state('binary_sensor.door_window_sensor_158d00022b3b66', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.door_window_sensor_158d00022b3b66.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xd2 = states.binary_sensor.door_window_sensor_158d00022b3b66.attributes.battery_level|default(0)|int %}
        {% set battery_round_xd2 = (battery_level_xd2 / 10) |int * 10 %}
        {% if battery_round_xd2 >= 100 or is_state('binary_sensor.door_window_sensor_158d00022b3b66', 'unknown') %}
          mdi:battery
        {% elif battery_round_xd2 > 0 %}
          mdi:battery-{{ battery_round_xd2 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_door_3_bat: # This arrived with 63%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Front Door Battery
      value_template: >
        {% if is_state('binary_sensor.door_window_sensor_158d00022d0917', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.door_window_sensor_158d00022d0917.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xd3 = states.binary_sensor.door_window_sensor_158d00022d0917.attributes.battery_level|default(0)|int %}
        {% set battery_round_xd3 = (battery_level_xd3 / 10) |int * 10 %}
        {% if battery_round_xd3 >= 100 or is_state('binary_sensor.door_window_sensor_158d00022d0917', 'unknown') %}
          mdi:battery
        {% elif battery_round_xd3 > 0 %}
          mdi:battery-{{ battery_round_xd3 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    z_door_1_bat: # This arrived with 63%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Basement Door Battery
      value_template: >
        {% if is_state('binary_sensor.sensor', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.sensor.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_zd1 = states.binary_sensor.sensor.attributes.battery_level|default(0)|int %}
        {% set battery_round_zd1 = (battery_level_zd1 / 10) |int * 10 %}
        {% if battery_round_zd1 >= 100 or is_state('binary_sensor.sensor', 'unknown') %}
          mdi:battery
        {% elif battery_round_zd1 > 0 %}
          mdi:battery-{{ battery_round_zd1 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_motion_1_bat: # This arrived with 45%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Basement Entrance Motion Sensor Battery
      value_template: >
        {% if is_state('binary_sensor.motion_sensor_158d000200d203', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.motion_sensor_158d000200d203.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xm1 = states.binary_sensor.motion_sensor_158d000200d203.attributes.battery_level|default(0)|int %}
        {% set battery_round_xm1 = (battery_level_xm1 / 10) |int * 10 %}
        {% if battery_round_xm1 >= 100 or is_state('binary_sensor.motion_sensor_158d000200d203', 'unknown') %}
          mdi:battery
        {% elif battery_round_xm1 > 0 %}
          mdi:battery-{{ battery_round_xm1 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_motion_2_bat: # This arrived with 57%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Conservatory Motion Sensor Battery
      value_template: >
        {% if is_state('binary_sensor.motion_sensor_158d000200d285', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.motion_sensor_158d000200d285.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xm2 = states.binary_sensor.motion_sensor_158d000200d285.attributes.battery_level|default(0)|int %}
        {% set battery_round_xm2 = (battery_level_xm2 / 10) |int * 10 %}
        {% if battery_round_xm2 >= 100 or is_state('binary_sensor.motion_sensor_158d000200d285', 'unknown') %}
          mdi:battery
        {% elif battery_round_xm2 > 0 %}
          mdi:battery-{{ battery_round_xm2 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_motion_3_bat: # This arrived with 51%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Bathroom Motion Sensor Battery
      value_template: >
        {% if is_state('binary_sensor.motion_sensor_158d000200e0c5', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.motion_sensor_158d000200e0c5.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xm3 = states.binary_sensor.motion_sensor_158d000200e0c5.attributes.battery_level|default(0)|int %}
        {% set battery_round_xm3 = (battery_level_xm3 / 10) |int * 10 %}
        {% if battery_round_xm3 >= 100 or is_state('binary_sensor.motion_sensor_158d000200e0c5', 'unknown') %}
          mdi:battery
        {% elif battery_round_xm3 > 0 %}
          mdi:battery-{{ battery_round_xm3 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_motion_4_bat: # This arrived with 51%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Upstairs Bathroom Motion Sensor Battery
      value_template: >
        {% if is_state('binary_sensor.motion_sensor_158d000236a0d0', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.motion_sensor_158d000236a0d0.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xm4 = states.binary_sensor.motion_sensor_158d000236a0d0.attributes.battery_level|default(0)|int %}
        {% set battery_round_xm4 = (battery_level_xm4 / 10) |int * 10 %}
        {% if battery_round_xm4 >= 100 or is_state('binary_sensor.motion_sensor_158d000236a0d0', 'unknown') %}
          mdi:battery
        {% elif battery_round_xm4 > 0 %}
          mdi:battery-{{ battery_round_xm4 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_motion_5_bat: # This arrived with 51%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Basement Stairway Motion Sensor Battery
      value_template: >
        {% if is_state('binary_sensor.motion_sensor_158d000236a0f3', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.motion_sensor_158d000236a0f3.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xm5 = states.binary_sensor.motion_sensor_158d000236a0f3.attributes.battery_level|default(0)|int %}
        {% set battery_round_xm5 = (battery_level_xm5 / 10) |int * 10 %}
        {% if battery_round_xm5 >= 100 or is_state('binary_sensor.motion_sensor_158d000236a0f3', 'unknown') %}
          mdi:battery
        {% elif battery_round_xm5 > 0 %}
          mdi:battery-{{ battery_round_xm5 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_motion_6_bat: # This arrived with 51%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Bathroom 2 Motion Sensor Battery
      value_template: >
        {% if is_state('binary_sensor.motion_sensor_158d000236a22f', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.motion_sensor_158d000236a22f.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xm6 = states.binary_sensor.motion_sensor_158d000236a22f.attributes.battery_level|default(0)|int %}
        {% set battery_round_xm6 = (battery_level_xm6 / 10) |int * 10 %}
        {% if battery_round_xm6 >= 100 or is_state('binary_sensor.motion_sensor_158d000236a22f', 'unknown') %}
          mdi:battery
        {% elif battery_round_xm6 > 0 %}
          mdi:battery-{{ battery_round_xm6 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_motion_7_bat: # This arrived with 51%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: TV Room Motion Sensor Battery
      value_template: >
        {% if is_state('binary_sensor.motion_sensor_158d000236a116', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.motion_sensor_158d000236a116.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xm7 = states.binary_sensor.motion_sensor_158d000236a116.attributes.battery_level|default(0)|int %}
        {% set battery_round_xm7 = (battery_level_xm7 / 10) |int * 10 %}
        {% if battery_round_xm7 >= 100 or is_state('binary_sensor.motion_sensor_158d000236a116', 'unknown') %}
          mdi:battery
        {% elif battery_round_xm7 > 0 %}
          mdi:battery-{{ battery_round_xm7 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_temphum_1_bat: # This arrived with 57%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Bathroom Temp/Hum Battery
      value_template: >
        {% if is_state('sensor.temperature_158d00022c66ff', 'unknown') %}
          110
        {% else %}
          {{ states.sensor.temperature_158d00022c66ff.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xth1 = states.sensor.temperature_158d00022c66ff.attributes.battery_level|default(0)|int %}
        {% set battery_round_xth1 = (battery_level_xth1 / 10) |int * 10 %}
        {% if battery_round_xth1 >= 100 or is_state('sensor.temperature_158d00022c66ff', 'unknown') %}
          mdi:battery
        {% elif battery_round_xth1 > 0 %}
          mdi:battery-{{ battery_round_xth1 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_temphum_2_bat: # This arrived with 39%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Wine Cellar Temp/Hum Battery
      value_template: >
        {% if is_state('sensor.temperature_158d000245b4a2', 'unknown') %}
          110
        {% else %}
          {{ states.sensor.temperature_158d000245b4a2.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xth2 = states.sensor.temperature_158d000245b4a2.attributes.battery_level|default(0)|int %}
        {% set battery_round_xth2 = (battery_level_xth2 / 10) |int * 10 %}
        {% if battery_round_xth2 >= 100 or is_state('sensor.temperature_158d000245b4a2', 'unknown') %}
          mdi:battery
        {% elif battery_round_xth2 > 0 %}
          mdi:battery-{{ battery_round_xth2 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_temphum_3_bat: # This arrived with 35%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Washing Room Temp/Hum Battery
      value_template: >
        {% if is_state('sensor.temperature_158d0002437897', 'unknown') %}
          110
        {% else %}
          {{ states.sensor.temperature_158d0002437897.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xth3 = states.sensor.temperature_158d0002437897.attributes.battery_level|default(0)|int %}
        {% set battery_round_xth3 = (battery_level_xth3 / 10) |int * 10 %}
        {% if battery_round_xth3 >= 100 or is_state('sensor.temperature_158d0002437897', 'unknown') %}
          mdi:battery
        {% elif battery_round_xth3 > 0 %}
          mdi:battery-{{ battery_round_xth3 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_temphum_4_bat: # This arrived with 41%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Shed Temp/Hum Battery
      value_template: >
        {% if is_state('sensor.temperature_158d000243778b', 'unknown') %}
          110
        {% else %}
          {{ states.sensor.temperature_158d000243778b.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xth4 = states.sensor.temperature_158d000243778b.attributes.battery_level|default(0)|int %}
        {% set battery_round_xth4 = (battery_level_xth4 / 10) |int * 10 %}
        {% if battery_round_xth4 >= 100 or is_state('sensor.temperature_158d000243778b', 'unknown') %}
          mdi:battery
        {% elif battery_round_xth4 > 0 %}
          mdi:battery-{{ battery_round_xth4 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

- platform: template
  sensors:
    x_smoke_1_bat: # This arrived with 93%, according to home assistant. Maybe I should see what the % is when it is empty, and calculate, so it goes from 0% to 100%, instead of from ??% to 63%.
      friendly_name: Conservatory Door Battery
      value_template: >
        {% if is_state('binary_sensor.smoke_sensor_158d0001bc49bd', 'unknown') %}
          110
        {% else %}
          {{ states.binary_sensor.smoke_sensor_158d0001bc49bd.attributes["battery_level"] | float}}
        {% endif %}
      icon_template: >
        {% set battery_level_xs1 = states.binary_sensor.smoke_sensor_158d0001bc49bd.attributes.battery_level|default(0)|int %}
        {% set battery_round_xs1 = (battery_level_xs1 / 10) |int * 10 %}
        {% if battery_round_xs1 >= 100 or is_state('binary_sensor.smoke_sensor_158d0001bc49bd', 'unknown') %}
          mdi:battery
        {% elif battery_round_xs1 > 0 %}
          mdi:battery-{{ battery_round_xs1 }}
        {% else %}
          mdi:battery-charging-wireless-outline
        {% endif %}
      unit_of_measurement: '%'

#######################
#    Plant sensors    #
#######################

#############
#__Plant 1__#

# - platform: mqtt
#   name: plant_sensor_1_state
#   state_topic: "plant_sensor/1"
#   value_template: "{{ value_json.state }}"
- platform: mqtt
  name: plant_sensor_1_battery
  state_topic: "plant_sensor/1"
  unit_of_measurement: '%'
  value_template: "{{ value_json.battery }}"
  device_class: battery
- platform: mqtt
  name: plant_sensor_1_temperature
  state_topic: "plant_sensor/1"
  unit_of_measurement: 'Â°C'
  value_template: "{{ value_json.temperature }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_1_conductivity
  state_topic: "plant_sensor/1"
  unit_of_measurement: 'ÂµS/cm'
  value_template: "{{ value_json.conductivity }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_1_light_intensity
  state_topic: "plant_sensor/1"
  unit_of_measurement: 'lx'
  value_template: "{{ value_json.light_intensity }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_1_moisture
  state_topic: "plant_sensor/1"
  unit_of_measurement: '%'
  value_template: "{{ value_json.moisture }}"
  device_class: humidity

#############
#__Plant 2__#

# - platform: mqtt
#   name: plant_sensor_2_state
#   state_topic: "plant_sensor/2"
#   value_template: "{{ value_json.state }}"
- platform: mqtt
  name: plant_sensor_2_battery
  state_topic: "plant_sensor/2"
  unit_of_measurement: '%'
  value_template: "{{ value_json.battery }}"
  device_class: battery
- platform: mqtt
  name: plant_sensor_2_temperature
  state_topic: "plant_sensor/2"
  unit_of_measurement: 'Â°C'
  value_template: "{{ value_json.temperature }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_2_conductivity
  state_topic: "plant_sensor/2"
  unit_of_measurement: 'ÂµS/cm'
  value_template: "{{ value_json.conductivity }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_2_light_intensity
  state_topic: "plant_sensor/2"
  unit_of_measurement: 'lx'
  value_template: "{{ value_json.light_intensity }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_2_moisture
  state_topic: "plant_sensor/2"
  unit_of_measurement: '%'
  value_template: "{{ value_json.moisture }}"
  device_class: humidity

#############
#__Plant 3__#

# - platform: mqtt
#   name: plant_sensor_3_state
#   state_topic: "plant_sensor/3"
#   value_template: "{{ value_json.state }}"
- platform: mqtt
  name: plant_sensor_3_battery
  state_topic: "plant_sensor/3"
  unit_of_measurement: '%'
  value_template: "{{ value_json.battery }}"
  device_class: battery
- platform: mqtt
  name: plant_sensor_3_temperature
  state_topic: "plant_sensor/3"
  unit_of_measurement: 'Â°C'
  value_template: "{{ value_json.temperature }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_3_conductivity
  state_topic: "plant_sensor/3"
  unit_of_measurement: 'ÂµS/cm'
  value_template: "{{ value_json.conductivity }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_3_light_intensity
  state_topic: "plant_sensor/3"
  unit_of_measurement: 'lx'
  value_template: "{{ value_json.light_intensity }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_3_moisture
  state_topic: "plant_sensor/3"
  unit_of_measurement: '%'
  value_template: "{{ value_json.moisture }}"
  device_class: humidity

#############
#__Plant 4__#

# - platform: mqtt
#   name: plant_sensor_4_state
#   state_topic: "plant_sensor/4"
#   value_template: "{{ value_json.state }}"
- platform: mqtt
  name: plant_sensor_4_battery
  state_topic: "plant_sensor/4"
  unit_of_measurement: '%'
  value_template: "{{ value_json.battery }}"
  device_class: battery
- platform: mqtt
  name: plant_sensor_4_temperature
  state_topic: "plant_sensor/4"
  unit_of_measurement: 'Â°C'
  value_template: "{{ value_json.temperature }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_4_conductivity
  state_topic: "plant_sensor/4"
  unit_of_measurement: 'ÂµS/cm'
  value_template: "{{ value_json.conductivity }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_4_light_intensity
  state_topic: "plant_sensor/4"
  unit_of_measurement: 'lx'
  value_template: "{{ value_json.light_intensity }}"
  device_class: temperature
- platform: mqtt
  name: plant_sensor_4_moisture
  state_topic: "plant_sensor/4"
  unit_of_measurement: '%'
  value_template: "{{ value_json.moisture }}"
  device_class: humidity

#############
#__Remotes__#

- platform: hue
  ip_address: 192.168.0.10
  token: !secret hue_bridge_1_username

# - platform: rest
#   name: Hue Dimmer 1
#   resource: http://192.168.0.10/api/ZXg61xn3DGQACjiOdXWqGN1mv44VRwiq23TPwQOT/sensors/2
#   # If you notice errors in your log, increase scan_interval to 2
#   scan_interval: 1
#   value_template: >-
#     {# Grab the lastupdated time and convert it to a timestamp #}
#     {% set lastupdated = as_timestamp(value_json.state.lastupdated ~ '-00:00')|int %}
#     {# Compare the lastupdated against the current timestamps #}
#     {% if as_timestamp(now())|int - lastupdated > 5 %}
#       {# If no events have happened in the past 5 seconds, show 'idle' as state #}
#       idle
#     {% else %}
#       {# Get the buttonevent that was triggered #}
#       {% set buttonevent = value_json.state.buttonevent|string %}
#       {# Example button event: 4003 #}
#       {# buttonevent[0] = 4 = button number #}
#       {# buttonevent[3] = 3 = button event #}
#       {# If buttonevent[3] is even (X000 or X002), the button was clicked #}
#       {# If buttonevent[3] is odd (X001 or X003), the button was held #}
#       {# The ~ operator is used to concatenate strings #}
#       {{ ('hold' if buttonevent[3]|int is odd else 'click') ~ '_' ~ buttonevent[0] }}
#     {% endif %}


#################
#__SkyBell__#

- platform: skybell
  monitored_conditions:
    - chime_level

###################
#__Misc. Sensors__#

- platform: api_streams

- platform: cert_expiry
  host: hass.aephirshome.duckdns.org
#  host: home-assistant.io
#  port: 443

- platform: time_date
  display_options:
    - 'time'
    - 'date'
