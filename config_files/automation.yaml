#########################
#                       #
#      AUTOMATIONS      #
#                       #
#########################


##############
#    Test    #
##############


# #################
# #    Skybell    #
# #################
#
# - alias: "SkyBell Motion Detected"
#   initial_state: True
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.skybell_front_door_motion
#       to: 'on'
#   action:
#     - service: notify.home_aephir_bot
#       data_template:
#         message: "Front Door Motion Detected"

##################
#    Location    #
##################

##################
#__Alarm_Prompt__#

- alias: "Arm the Alarm, Aephir leaves last"
  initial_state: True
  trigger:
    - platform: state
      entity_id: input_boolean.aephirhome
      to: 'off'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.kristinahome
        state: 'off'
      - condition: state
        entity_id: input_boolean.guest_mode
        state: 'off'
  action:
  - service: notify.home_aephir_bot
    data_template:
      message: "The house is empty."
      data:
          inline_keyboard:
            - 'Set alarm:/set_alarm_away, Turn off everything:/all_off'
            - 'Set alarm and turn off everything:/set_alarm_all_off, No action:/removekeyboard'

- alias: "Arm the Alarm, Kristina leaves last"
  initial_state: True
  trigger:
    - platform: state
      entity_id: input_boolean.kristinahome
      to: 'off'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.aephirhome
        state: 'off'
      - condition: state
        entity_id: input_boolean.guest_mode
        state: 'off'
  action:
  - service: notify.ios_kristinas_ipad
    data:
      message: "The house is empty."
      data:
        push:
          badge: 0
          # sound: <SOUND FILE HERE>
          category: "set_alarm" # Needs to match the top level identifier you used in the ios configuration
        # action_data: # Anything passed in action_data will get echoed back to Home Assistant.
        #   entity_id: light.test
        #   my_custom_data: foo_bar

- alias: "Arm the Alarm, Emilie leaves last"
  initial_state: True
  trigger:
    - platform: state
      entity_id: device_tracker.emilie
      to: 'not_home'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.aephirhome
        state: 'off'
      - condition: state
        entity_id: input_boolean.kristinahome
        state: 'off'
  action:

#################
#__iOS Actions__#

- alias: iOS Alarm armed away
  initial_state: True
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: SET_ALARM_AWAY
  action:
  - service: script.turn_on
    entity_id: script.alarm_armed_away

- alias: iOS All off
  initial_state: True
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: ALL_OFF_NO_ALARM
  action:
  - service: script.turn_on
    entity_id: script.everyone_left_turn_off_everything

- alias: iOS Alarm armed away and all off
  initial_state: True
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: SET_ALARM_AWAY_ALL_OFF
  action:
  - service: script.turn_on
    entity_id: script.everyone_left_turn_off_everything
  - service: script.turn_on
    entity_id: script.alarm_armed_away

- alias: iOS guest mode
  initial_state: True
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: GUEST_MODE
  action:
  - service: homeassistant.turn_on
    entity_id: input_boolean.guest_mode

#############
#__Notfiy__#

- alias: "Kristina Leave Work" # Message through telegram if Kristina leaves work
  initial_state: True
  trigger:
    - platform: state
      from: 'Work Kristina'
      to: 'not_home'
      entity_id: device_tracker.meta_kristina
  action:
    service: notify.home_aephir_bot
    data:
      message: "Kristina left work"

- alias: "Kristina Leave Home" # Message through telegram if Kristina leaves home - doesn't work...
  initial_state: True
  trigger:
    - platform: state
      from: 'home'
      to: 'not_home'
      entity_id: device_tracker.meta_kristina
  action:
    service: notify.home_aephir_bot
    data:
      message: "Kristina left home"

- alias: "Kristina Arrives Home" # Message through Join if Kristina leaves work - doesn't work...
  initial_state: True
  trigger:
    - platform: state
      from: 'not_home'
      to: 'home'
      entity_id: device_tracker.meta_kristina
  action:
    service: notify.telegram
    data:
      message: "Kristina is home"

- alias: "Kristina at airport" # Message through Join if Kristina leaves work - doesn't work...
  initial_state: True
  trigger:
    - platform: state
      from: 'away'
      to: 'Kastrup Airport'
      entity_id: device_tracker.meta_kristina
  action:
    service: notify.home_aephir_bot
    data:
      message: "Kristina at the airport"

- alias: Notify iOS app test
  initial_state: True
  trigger:
    - platform: state
      from: 'home'
      to: 'not_home'
      entity_id: device_tracker.meta_kristina
  action:
    service: notify.ios_kristinas_iphone
    data:
      message: "You left home... Walden Loves you!"
#      data:
#        push:
#          badge: 5
#          sound: <SOUND FILE HERE>
#          category: "alarm" # Needs to match the top level identifier you used in the ios configuration
#        action_data: # Anything passed in action_data will get echoed back to Home Assistant.
#          entity_id: light.test
#          my_custom_data: foo_bar



###################
#__Input_Boolean__#


- alias: Karen iphone guest mode
  initial_state: True
  trigger:
    - platform: state
      entity_id:
        - device_tracker.karen_iphone_ping
      to: 'on'
  action:
    service: homeassistant.turn_on
    entity_id: input_boolean.guest_mode

- alias: Karen iphone guest mode off
  trigger:
    - platform: state
      entity_id:
        - device_tracker.karen_iphone_ping
      to: 'off'
      for:
        minutes: 20
  action:
    - service: notify.home_aephir_bot
      data_template:
        message: "Karen left."
        data:
          inline_keyboard:
          - 'Turn off guest mode:/guest_mode_off, No action:/removekeyboard'
  # action:
  #   service: homeassistant.turn_off
  #   entity_id: input_boolean.guest_mode

- alias: Guest leaves last # Turns of the "someonehome" input_boolean if guest mode is deactiveatd and no one is home
  initial_state: True
  trigger:
    - platform: state
      entity_id:
        - input_boolean.guest_mode
      from: 'on'
      to: 'off'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: device_tracker.meta_walden
        state: 'not_home'
      - condition: state
        entity_id: device_tracker.meta_kristina
        state: 'not_home'
  action:
    service: homeassistant.turn_off
    entity_id: input_boolean.someonehome

########################################
#__Location Based Lights and Switches__#

# - alias: "Someone arrives home" # Turns on welcome lights when first person arrives home within 1h before sunset
#   initial_state: True
#   trigger:
#     - platform: state
#       entity_id: input_boolean.someonehome
#       from: 'off'
#       to: 'on'
#   condition:
#     condition: sun
#     after: sunset
#     after_offset: "-01:00:00"
#   action:
#     service: script.turn_on
#     entity_id: scene.welcome_home

# - alias: "Everyone left" # Switches of everyting when last person leaves home
#   initial_state: True
#   trigger:
#     - platform: state
#       entity_id: input_boolean.someonehome
#       from: 'on'
#       to: 'off'
# #  condition:
# #    condition: state
# #    entity_id: input_boolean.guest_mode
# #    state: 'off'
#   action:
#     service: script.turn_on
#     entity_id: script.everyone_left_turn_off_everything

- alias: "Sunrise, Night Light Off" # Turns of the night light at sunrise, if left on for the kids
  initial_state: True
  trigger:
    - platform: sun
      event: sunrise
#      offset: '+01:00:00'
#  trigger:
#    - platform: numeric_state
#      entity_id: sun.sun
#      value_template: "{{ state.attributes.elevation }}"
#    # Can be a positive or negative number
#      above: 4.5
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: light.kitchen_spots
        state: 'off'
      - condition: state
        entity_id: light.cconservatory
        state: 'off'
  action:
    service: light.turn_off
    entity_id: group.living_room_lightstrip


#############
#__Life360__#

# Kind of annoying, I get notifications about "overdue", then "updated" all the time.

# - alias: Life360 Overdue Update
#   initial_state: True
#   trigger:
#     platform: event
#     event_type: device_tracker.life360_update_overdue
#   action:
#     service: notify.home_aephir_bot
#     data_template:
#       title: Life360 update overdue
#       message: >
#         Update for {{
#           state_attr(trigger.event.data.entity_id, 'friendly_name')
#         }} is overdue.
#
# - alias: Life360 Update Restored
#   initial_state: True
#   trigger:
#     platform: event
#     event_type: device_tracker.life360_update_restored
#   action:
#     service: notify.home_aephir_bot
#     data_template:
#       title: Life360 update restored
#       message: >
#         Update for {{
#           state_attr(trigger.event.data.entity_id, 'friendly_name')
#         }} restored after {{ trigger.event.data.wait }}.

###############
#    IFTTT    #
###############

- alias: Turn Off Oven
  trigger:
    platform: state
    entity_id: input_boolean.test
    to: 'on'
  action:
    service: ifttt.trigger
    data: {"event":"turn_off_oven"}

######################
#    Input Select    #
######################

#############
#__iKettle__#

# - alias: Set iKettle Tempereature
#   initial_state: True
#   trigger:
#     - platform: state
#       entity_id: input_select.ikettle_select
#   action:
#     service: script.turn_on
#     data:
#       entity_id: script.ikettle_test
#       temp: YOURTEMP


######################
#    Media Player    #
######################

# - alias: 'A_ ADB start'
#   trigger:
#     platform: state
#     entity_id: device_tracker.tcl55Ddc760
#     to: 'home'
#   condition:
#     - condition: state
#       entity_id: media_player.tcl55Ddc760
#       state: 'Unavailable'
#   action:
#     - service: shell_command.adb
#       data_template:
#         ip_adb: '192.168.0.44'

######################
#    Oven Control    #
######################

- id: 'oven_on'
  alias: 'Oven Power On'
  initial_state: true
  trigger:
    platform: state
    entity_id: input_select.oven_program
    to: "Power On"
  action:
    service: homeassistant.turn_on
    entity_id: switch.oven

- id: 'oven_off'
  alias: 'Oven Power Off'
  initial_state: true
  trigger:
    platform: state
    entity_id: input_select.oven_program
    to: "Power Off"
  action:
    service: homeassistant.turn_off
    entity_id: switch.oven

- id: 'oven_600'
  alias: 'Oven 600W'
  initial_state: true
  trigger:
    platform: state
    entity_id: input_select.oven_program
    to: "600W heating"
  action:
    service: homeassistant.turn_on
    entity_id: switch.oven_program_600watt

- id: 'oven_hot_air'
  alias: 'Oven Hot Air'
  initial_state: true
  trigger:
    platform: state
    entity_id: input_select.oven_program
    to: "Hot air"
  action:
    service: homeassistant.turn_on
    entity_id: switch.oven_program_hotair

- id: 'oven_pizza'
  alias: 'Oven Pizza'
  initial_state: true
  trigger:
    platform: state
    entity_id: input_select.oven_program
    to: "Pizza"
  action:
    service: homeassistant.turn_on
    entity_id: switch.oven_program_pizzasetting

- id: 'oven_pre-heat'
  alias: 'Oven Pre-heating'
  initial_state: true
  trigger:
    platform: state
    entity_id: input_select.oven_program
    to: "Pre-heating"
  action:
    service: homeassistant.turn_on
    entity_id: switch.oven_program_preheating

- id: 'oven_top_bottom'
  alias: 'Oven Top and Bottom heating'
  initial_state: true
  trigger:
    platform: state
    entity_id: input_select.oven_program
    to: "Top & bottom heating"
  action:
    service: homeassistant.turn_on
    entity_id: switch.oven_program_topbottomheating

##################
#    Telegram    #
##################

- id: 'telegramremoveinline' # https://community.home-assistant.io/t/telegram-bot-notifications-and-communication/50247
  alias: 'Telegram callback to remove keyboard'
  initial_state: True
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: '/removekeyboard'
  action:
  - service: telegram_bot.answer_callback_query
    data_template:
      callback_query_id: '{{ trigger.event.data.id }}'
      message: 'OK'
  - service: telegram_bot.edit_replymarkup
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
      inline_keyboard: []


################
#    Themes    #
################

- alias: 'Set HA theme for day and night'
  initial_state: True
  trigger:
    - platform: homeassistant
      event: start
    - platform: state
      entity_id: sun.sun
      to: above_horizon
    - platform: state
      entity_id: sun.sun
      to: below_horizon
  action:
    - service_template: frontend.set_theme
      data_template:
        name: >
          {% if (states.sun.sun.state == "above_horizon") %}
            default
          {% else %}
            midnight
          {% endif %}

##########################################
#    Kustom (KWGT) Widget Automaitons    #
##########################################

# - alias: kwgt kitchen lights on
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_kitchen_lights_on
#   action:
#     - service: homeassistant.turn_on
#       entity_id: light.kitchen_lights
#
# - alias: kwgt kitchen lights off
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_kitchen_lights_off
#   action:
#     - service: homeassistant.turn_off
#       entity_id: light.kitchen_lights
#
# - alias: kwgt dining room lights on
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_dining_room_lights_on
#   action:
#     - service: homeassistant.turn_on
#       entity_id: light.dining_room_lights
#
# - alias: kwgt dining room off
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_dining_room_lights_off
#   action:
#     - service: homeassistant.turn_off
#       entity_id: light.dining_room_lights
#
# - alias: kwgt conservatory lights on
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_conservatory_lights_on
#   action:
#     - service: homeassistant.turn_on
#       entity_id: light.conservatory_lights
#
# - alias: kwgt conservatory off
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_conservatory_lights_off
#   action:
#     - service: homeassistant.turn_off
#       entity_id: light.conservatory_lights
#
# - alias: kwgt bedroom lights on
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_bedroom_lights_on
#   action:
#     - service: homeassistant.turn_on
#       entity_id: light.bedroom
#
# - alias: kwgt bedroom off
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_bedroom_lights_off
#   action:
#     - service: homeassistant.turn_off
#       entity_id: light.bedroom
#
# - alias: kwgt baby room lights on
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_baby_room_lights_on
#   action:
#     - service: homeassistant.turn_on
#       entity_id: light.baby_room
#
# - alias: kwgt baby room off
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_baby_room_lights_off
#   action:
#     - service: homeassistant.turn_off
#       entity_id: light.baby_room
#
# - alias: kwgt entrance lights on
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_entrance_lights_on
#   action:
#     - service: homeassistant.turn_on
#       entity_id: light.entrance_lights
#
# - alias: kwgt entrance lights off
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_entrance_lights_off
#   action:
#     - service: homeassistant.turn_off
#       entity_id: light.entrance_lights
#
# - alias: kwgt wine wine cellar lights on
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_wine_cellar_lights_on
#   action:
#     - service: homeassistant.turn_on
#       entity_id: light.lightstrip_1_lights
#
# - alias: kwgt wine wine cellar lights off
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_wine_cellar_lights_off
#   action:
#     - service: homeassistant.turn_off
#       entity_id: light.lightstrip_1_lights

# - alias: kwgt last turned on increase brightness tasker
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_brightness_up
#   action:
#     - service:
#       data_template:
#       entity_id: >-
#         {%- if (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.dining_room_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.kitchen_lights == 'on') -%}
#         light.kitchen_lights
#         {%- elif (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.kitchen_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.dining_room_lights == 'on') -%}
#         {%- elif (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.kitchen_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.conservatory_lights == 'on') -%}
#         light.conservatory_lights
#         {%- elif (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.kitchen_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.bedroom == 'on') -%}
#         light.bedroom
#         {%- endif -%}
#         brightness: '{{states.($entity_id).attributes.brightness + 10}}'
#
# - alias: last turned on decrease brightness tasker
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_brightness_down
#   action:
#     - service:
#       data_template:
#       entity_id: >-
#         {%- if (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.dining_room_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.kitchen_lights == 'on') -%}
#         light.kitchen_lights
#         {%- elif (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.kitchen_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.dining_room_lights == 'on') -%}
#         {%- elif (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.kitchen_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.conservatory_lights == 'on') -%}
#         light.conservatory_lights
#         {%- elif (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.kitchen_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.bedroom == 'on') -%}
#         light.bedroom
#         {%- endif -%}
#         brightness: '{{states.($entity_id).attributes.brightness - 10}}'

# - alias: last changed light tasker
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_brightness_down
#   action:
#     - service:
#       data_template:
#       entity_id: >-
#         {%- if (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.dining_room_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.kitchen_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.kitchen_lights == 'on') -%}
#         light.kitchen_lights
#         {%- elif (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.kitchen_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.dining_room_lights == 'on') -%}
#         {%- elif (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.kitchen_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.conservatory_lights == 'on') -%}
#         light.conservatory_lights
#         {%- elif (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.kitchen_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) > (as_timestamp(now()) - as_timestamp(states.light.dining_room_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.light.conservatory_lights.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.baby_room.last_changed)) and (as_timestamp(now()) - as_timestamp(states.light.bedroom.last_changed)) < (as_timestamp(now()) - as_timestamp(states.entrance_lights.last_changed)) and (states.light.bedroom == 'on') -%}
#         light.bedroom
#         {%- endif -%}

- alias: kwgt espresso on
  initial_state: True
  trigger:
    platform: webhook
    webhook_id: kwgt_espresso_on
  action:
    - service: homeassistant.turn_on
      entity_id: switch.switch

- alias: kwgt espresso off
  initial_state: True
  trigger:
    platform: webhook
    webhook_id: kwgt_espresso_off
  action:
    - service: homeassistant.turn_off
      entity_id: switch.switch

- alias: kwgt fountain on
  initial_state: True
  trigger:
    platform: webhook
    webhook_id: kwgt_fountain_on
  action:
    - service: homeassistant.toggle
      entity_id: switch.fountain

- alias: kwgt fountain off
  initial_state: True
  trigger:
    platform: webhook
    webhook_id: kwgt_fountain_off
  action:
    - service: homeassistant.turn_off
      entity_id: switch.fountain
#
# - alias: kwgt fume hood power
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_fume_hood_power
#   action:
#     - service:
#       domain: remote
#       action: send_command
#       entity_id: remote.kitchen_remote
#       data:
#         command:
#           - 'fume_hood_power'
#
# - alias: kwgt fume hood lights
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_fume_hood_lights
#   action:
#     - service:
#       domain: remote
#       action: send_command
#       entity_id: remote.kitchen_remote
#       data:
#         command:
#           - 'fume_hood_lights'
#
# - alias: kwgt fume hood increase power
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_fume_hood_increase
#   action:
#     - service:
#       domain: remote
#       action: send_command
#       entity_id: remote.kitchen_remote
#       data:
#         command:
#           - 'fume_hood_increase'
#
# - alias: kwgt fume hood decrease power
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: kwgt_fume_hood_decrease
#   action:
#     - service:
#       domain: remote
#       action: send_command
#       entity_id: remote.kitchen_remote
#       data:
#         command:
#           - 'fume_hood_decrease'


#######################
#    Homekit Start    #
#######################

- alias: 'Start HomeKit'
  initial_state: True
  trigger:
    - platform: homeassistant
      event: start
  action:
    - delay: 00:02  # Waits 2 minutes
    - service: homekit.start


################
#    System    #
################
# https://philhawthorne.com/ha-dockermon-use-home-assistant-to-monitor-start-or-stop-docker-containers/

- alias: Alert when a critical container goes offline
  initial_state: True
  trigger:
    - platform: state
      entity_id: switch.mqtt, switch.duckdns, switch.letsencrypt, switch.mariadb, switch.syncthing, switch.appdaemon, switch.nodered
      to: 'off'
      for:
        minutes: 5
  condition:
    condition: and
    conditions:
      # Only send this once per hour
      - condition: template
        value_template: >
          {% if states.automation.alert_when_a_critical_container_goes_offline.last_triggered is not none %}
            {% if as_timestamp(now()) | int   -  as_timestamp(states.automation.alert_when_a_critical_container_goes_offline.attributes.last_triggered) | int > 3600 %} true {% else %} false
            {% endif %}
          {% else %}
          false
          {% endif %}
  action:
    - service: notify.home_aephir_bot
      data_template:
        message: 'Docker container for {{ trigger.to_state.name }} is not running. Please check the status of this container as some features may stop functioning.'
        title: Container Alert
    - service: persistent_notification.create
      data_template:
        notification_id: offline_container
        title: Container Offline
        message: >
          Docker container for {{ trigger.to_state.name }} is not running. Please check the status of this container as some features may stop functioning.


###############
#    Alarm    #
###############
# https://github.com/gazoscalvertos/Hass-Custom-Alarm

- id: alarm_armed_away
  initial_state: True
  alias: '[Alarm] Away Mode Armed'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.house
      to: 'armed_away'
  action:
    - data:
        message: 'Alarm Away Mode Armed'
        target: email/example@gmail.com
      service: notify.pushbullet
    - data:
        message: 'The house alarm has been switched on in away mode. Goodbye'
      service: notify.example_phone_tts

- id: alarm_armed_home
  initial_state: True
  alias: '[Alarm] Home Mode Armed'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.house
      to: 'armed_home'
  action:
    - data:
        message: 'Alarm Home Mode Armed'
        target: email/example@gmail.com
      service: notify.pushbullet
    - data:
        message: 'The house alarm has been switched on in home mode. Goodnight'
      service: notify.example_phone_tts

- id: alarm_arming_away
  initial_state: True
  alias: '[Alarm] Away Mode Arming'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.house
      to: 'pending'
  action:
    - data:
        message: 'House alarm activating, ensure all doors and windows are closed'
      service: notify.example_phone_tts

- id: alarm_disarmed
  initial_state: True
  alias: '[Alarm] Disarmed'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.house
      to: 'disarmed'
  action:
    - service: notify.pushbullet
      data:
        message: 'Alarm Disabled'
        # target: email/example@gmail.com
    - service: switch.turn_off
      entity_id: switch.siren_switch
    - data:
        message: 'The house alarm has been Deactivated'
      service: notify.example_phone_tts

- id: alarm_triggered
  initial_state: True
  alias: '[Alarm] Triggered'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.house
      to: 'triggered'
  action:
    - service: switch.turn_on
      entity_id: switch.siren_switch
    - service: notify.home_aephir_bot
      data:
        message: 'ALARM TRIGGERED!!! {{ states[states.alarm_control_panel.house.attributes.changed_by.split(".")[0]][ states.alarm_control_panel.house.attributes.changed_by.split(".")[1]].name }}'
        # target: email/example@gmail.com
    - service: notify.ios_kristinas_iphone
      data:
        message: 'ALARM TRIGGERED!!! {{ states[states.alarm_control_panel.house.attributes.changed_by.split(".")[0]][ states.alarm_control_panel.house.attributes.changed_by.split(".")[1]].name }}'
        # target: email/example@gmail.com

- id: alarm_warning
  initial_state: True
  alias: '[Alarm] Warning'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.house
      to: 'warning'
  action:
    - service: notify.home_aephir_bot
      data:
        message: 'ALARM Warning {{ states[states.alarm_control_panel.house.attributes.changed_by.split(".")[0]][ states.alarm_control_panel.house.attributes.changed_by.split(".")[1]].name }}'
        # target: email/example@gmail.com
    - service: notify.ios_kristinas_iphone
      data:
        message: 'ALARM Warning {{ states[states.alarm_control_panel.house.attributes.changed_by.split(".")[0]][ states.alarm_control_panel.house.attributes.changed_by.split(".")[1]].name }}'
        # target: email/example@gmail.com
        push:
          badge: 5
          category: 'alarm'
    # - service: notify.home_aephir_bot
    #   data:
    #     message: 'Hello, the house alarm has been tripped. Please deactivate'
    # - service: notify.ios_kristinas_iphone
    #   data:
    #     message: 'Hello, the house alarm has been tripped. Please deactivate'


# - alias: '[Alarm] Panic Mode'
#   initial_state: True
#   trigger:
#     platform: state
#     entity_id: alarm_control_panel.house
#     value_template: '{{ state.attributes.panic_mode }}'
#     to: 'ACTIVE'
#   action:
#   - service: notify.home_aephir_bot
#     data:
#       message: 'ALARM Warning {{ states[states.alarm_control_panel.house.attributes.changed_by.split(".")[0]][ states.alarm_control_panel.house.attributes.changed_by.split(".")[1]].name }}'
#       target: email/example@gmail.com
#   - service: notify.ios_kristinas_iphone
#     data:
#       message: 'ALARM Warning {{ states[states.alarm_control_panel.house.attributes.changed_by.split(".")[0]][ states.alarm_control_panel.house.attributes.changed_by.split(".")[1]].name }}'
#       target: email/example@gmail.com

###############################
#__alarm_actions_from_notify__#

- alias: Sound the alarm
  initial_state: True
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: SOUND_ALARM
  action:
    - service: switch.turn_on
      entity_id: switch.siren_switch

#####################
#    Alarm clock    #
#####################

- alias: two hours to next alarm
  initial_state: True
  trigger:
    - platform: webhook
      webhook_id: 2h_to_alarm
  action:
    - delay: '01:45:00'
    - service: switch.turn_on
      entity_id: switch.switch
    - delay: '01:00:00'
    - service: switch.turn_off
      entity_id: switch.switch
#
# - alias: two hours to next alarm
#   initial_state: True
#   trigger:
#     - platform: webhook
#       webhook_id: alarm_time
#   condition:
#     condition: and
#     conditions:
#       - condition: value_template

############################
#    Thermostat updates    #
############################

# Doesn't work. It updates when it updates.

# - id: fibaro_update
#   initial_state: True
#   alias: update_fibaro_heat_controller_bathroom
#   trigger:
#     - platform: time_pattern
#       minutes: '/10'
#     - platform: homeassistant
#       event: start
#     - platform: event
#       event_type: call_service
#       event_data:
#         service_data:
#           entity_id: climate.fibaro_system_fgt001_heat_controller_heating
#         domain: climate
#         service: set_temperature
#     - platform: event
#       event_type: call_service
#       event_data:
#         service_data:
#           entity_id: climate.fibaro_system_fgt001_heat_controller_heating
#         domain: climate
#         service: set_operation_mode
#   # condition:
#   #   - condition: template
#   #     value_template: "{{ now().strftime('%d-%m') >= '10-10' or now().strftime('%d-%m') <= '15-04' }}"
#   action:
#     - service: zwave.refresh_entity
#       data:
#         entity_id: zwave.fibaro_system_fgt001_heat_controller




##################
#    Doorbell    #
##################

# The delay is currently unacceptable.
# I am using RESTtask plugin with tasker to monitor Skybell app,
# and trigger the "doorbell_day" script through an HTTP POST.
#
# See post #5 here https://community.home-assistant.io/t/tasker-long-lived-access-tokens/69253/4

- alias: 'Doorbell chime test'
  initial_state: True
  trigger:
    platform: state
    entity_id: binary_sensor.skybell_front_door_button
    to: 'on'
  action:
    service: notify.home_aephir_bot
    data:
      message: "on"
#
# - alias: 'Doorbell chime'
#   initial_state: True
#   trigger:
#     platform: state
#     entity_id: binary_sensor.skybell_front_door_button
#     to: 'on'
#   action:
#     - service: script.turn_on
#       entity_id: script.doorbell_day

# Throgh RESTtask

# - alias: 'Doorbell chime'
#   initial_state: True
#   trigger:
#     platform: webhook
#     webhook_id: restask_doorbell
#   action:
#     - service: script.turn_on
#       entity_id: script.doorbell_day
